import streamlit as st
#  Importa o Streamlit, uma biblioteca que permite criar aplica√ß√µes web interativas em Python.
import pandas as pd
#  Importa o Pandas, uma biblioteca para manipula√ß√£o e an√°lise de dados.
import plotly.express as px
# Importa o Plotly Express, uma biblioteca para cria√ß√£o de gr√°ficos interativos.
from query import *
# Importa todas as fun√ß√µes e vari√°veis do m√≥dulo query, que pode incluir a fun√ß√£o view_all_data() usada para obter dados de uma API.

st.set_page_config(page_title="Dashboard", page_icon="", layout="wide")
# Configura a p√°gina do aplicativo Streamlit, definindo o t√≠tulo como "Dashboard", sem √≠cone espec√≠fico (page_icon="") 
# e o layout como "wide", o que significa que a p√°gina ocupar√° toda a largura da tela.

@st.cache_data
# Decorador que indica que a fun√ß√£o load_data deve ter seus resultados em cache para melhorar o desempenho, 
# evitando carregamentos repetidos.
def load_data():
# Define uma fun√ß√£o para carregar dados da API.
    result = view_all_data()
#  Chama a fun√ß√£o view_all_data() para obter os dados da API.
    df = pd.DataFrame(result, columns=["id", "temperatura", "pressao" , "altitude", "umidade", "co2", "tempo_registro"])
# Converte os resultados obtidos em um DataFrame do Pandas, especificando as colunas correspondentes.
    return df
#  Retorna o DataFrame df.

df = load_data()
# Carrega os dados da API chamando a fun√ß√£o load_data() e armazena o DataFrame resultante na vari√°vel df.

# Bot√£o para atualizar os dados
if st.button("Atualizar Dados"):
    df = load_data()
# Verifica se o bot√£o "Atualizar Dados" foi pressionado. Se sim, recarrega os dados da API e atualiza o DataFrame df.

# Sidebar
st.sidebar.header("Selecione a Informa√ß√£o para Gr√°ficos")
# Adiciona um cabe√ßalho √† barra lateral do aplicativo Streamlit, com o texto "Selecione a Informa√ß√£o para Gr√°ficos".

# Sele√ß√£o de colunas para gr√°ficos
x_axis = st.sidebar.selectbox(
# Cria uma caixa de sele√ß√£o na barra lateral para o usu√°rio escolher a coluna a ser usada no eixo X do gr√°fico.
    "Eixo X",
    options=["umidade", "temperatura", "pressao", "altitude", "co2"],
#  Lista de op√ß√µes que o usu√°rio pode selecionar.
    index=0
# Define a op√ß√£o selecionada por padr√£o (0 = primeira op√ß√£o, 1 = segunda op√ß√£o, etc.).
)

y_axis = st.sidebar.selectbox(
# Cria uma caixa de sele√ß√£o semelhante para o eixo Y.
    "Eixo Y",
    options=["umidade", "temperatura", "pressao", "altitude", "co2"],
#  Lista de op√ß√µes que o usu√°rio pode selecionar.
    index=1
# Define a op√ß√£o selecionada por padr√£o (0 = primeira op√ß√£o, 1 = segunda op√ß√£o, etc.).
)

# Fun√ß√£o para verificar se um atributo deve ser exibido no filtro
def filtros(attribute):
    return attribute in [x_axis, y_axis]
# Define uma fun√ß√£o que verifica se o atributo dado deve ser exibido como um filtro, 
# retornando True se o atributo est√° sendo usado nos eixos X ou Y do gr√°fico.

st.sidebar.header("Selecione o Filtro")
# Adiciona um cabe√ßalho "Selecione o Filtro" na barra lateral, indicando que abaixo dessa linha ser√£o exibidos filtros de dados.


# Exibir sliders apenas se o atributo correspondente for selecionado
if filtros("temperatura"):
# Exibe um controle deslizante (slider) na barra lateral para filtrar a temperatura, 
# mas apenas se a temperatura estiver selecionada como eixo X ou Y.
    temperatura_range = st.sidebar.slider(
        "Temperatura (¬∞C)",
        min_value=float(df["temperatura"].min()),
    # Valor m√≠nimo do slider, baseado nos dados carregados.
        max_value=float(df["temperatura"].max()),
    # Valor m√°ximo do slider.
        value=(float(df["temperatura"].min()), float(df["temperatura"].max())),
    # Faixa de valores padr√£o selecionada.
        step=0.1
    # Incremento para cada movimento do slider.
    )

if filtros("pressao"):
    pressao_range = st.sidebar.slider(
        "Press√£o (hPa)",
        min_value=float(df["pressao"].min()),
        max_value=float(df["pressao"].max()),
        value=(float(df["pressao"].min()), float(df["pressao"].max())),
        step=0.1
    )
# Exibe um controle deslizante para filtrar a press√£o, com funcionamento similar ao slider de temperatura.

if filtros("altitude"):
    altitude_range = st.sidebar.slider(
        "Altitude (m)",
        min_value=float(df["altitude"].min()),
        max_value=float(df["altitude"].max()),
        value=(float(df["altitude"].min()), float(df["altitude"].max())),
        step=1.0
    )
# Exibe um controle deslizante para filtrar a altitude.

if filtros("umidade"):
    umidade_range = st.sidebar.slider(
        "Umidade (%)",
        min_value=float(df["umidade"].min()),
        max_value=float(df["umidade"].max()),
        value=(float(df["umidade"].min()), float(df["umidade"].max())),
        step=0.1
    )
# Exibe um controle deslizante para filtrar a umidade.

if filtros("co2"):
    co2_range = st.sidebar.slider(
        "CO2 (ppm)",
        min_value=float(df["co2"].min()),
        max_value=float(df["co2"].max()),
        value=(float(df["co2"].min()), float(df["co2"].max())),
        step=1.0
    )
# Exibe um controle deslizante para filtrar o CO2.

# Filtragem do DataFrame com base nos intervalos selecionados na sidebar
df_selection = df.copy()
# Cria uma c√≥pia do DataFrame original df. Isso √© feito para garantir que as opera√ß√µes 
# subsequentes de filtragem sejam aplicadas em uma nova inst√¢ncia do DataFrame (df_selection),
# sem alterar os dados originais em df.
if filtros("temperatura"):
# Verifica se a fun√ß√£o filtros("temperatura") retorna True. Esta fun√ß√£o provavelmente verifica 
# se o atributo "temperatura" deve ser filtrado (por exemplo, 
# se o usu√°rio selecionou essa coluna em um painel de filtros).
    df_selection = df_selection[
# Aqui, a filtragem est√° sendo aplicada √† coluna temperatura do DataFrame df_selection.
        (df_selection["temperatura"] >= temperatura_range[0]) & 
# Mant√©m apenas as linhas em que o valor da coluna temperatura √© maior ou igual ao limite inferior (temperatura_range[0]).
        (df_selection["temperatura"] <= temperatura_range[1])
# Mant√©m apenas as linhas em que o valor da coluna temperatura √© menor ou igual ao limite superior (temperatura_range[1]).
    ]
# Cria uma c√≥pia do DataFrame df e filtra os dados com base no intervalo selecionado para a temperatura, se aplic√°vel.

if filtros("pressao"):
    df_selection = df_selection[
        (df_selection["pressao"] >= pressao_range[0]) & 
        (df_selection["pressao"] <= pressao_range[1])
    ]
# Filtra os dados com base no intervalo selecionado para a press√£o, se aplic√°vel.

if filtros("altitude"):
    df_selection = df_selection[
        (df_selection["altitude"] >= altitude_range[0]) & 
        (df_selection["altitude"] <= altitude_range[1])
    ]
# Filtra os dados com base no intervalo selecionado para a altitude, se aplic√°vel.

if filtros("umidade"):
    df_selection = df_selection[
        (df_selection["umidade"] >= umidade_range[0]) & 
        (df_selection["umidade"] <= umidade_range[1])
    ]
# Filtra os dados com base no intervalo selecionado para a umidade, se aplic√°vel.

if filtros("co2"):
    df_selection = df_selection[
        (df_selection["co2"] >= co2_range[0]) & 
        (df_selection["co2"] <= co2_range[1])
    ]
# Filtra os dados com base no intervalo selecionado para o CO2, se aplic√°vel.

def Home():
# Define a fun√ß√£o Home(), respons√°vel por exibir os dados tabulares filtrados.
    with st.expander("Tabular"):
# Cria uma se√ß√£o expans√≠vel intitulada "Tabular". Usu√°rio pode expandir ou recolher essa √°rea conforme necess√°rio.
        showData = st.multiselect('Filter: ', df_selection.columns, default=[], key="showData_home")
# Permite ao usu√°rio selecionar colunas espec√≠ficas para exibi√ß√£o em uma tabela.
        if showData:
# Exibe os dados filtrados apenas se o usu√°rio selecionar alguma coluna.
            st.write(df_selection[showData])
# Exibe os dados filtrados com base nas colunas selecionadas pelo usu√°rio.
#  Mostra uma tabela na interface com as colunas selecionadas. 
# df_selection[showData] cria um novo DataFrame contendo apenas as colunas escolhidas.
        
    # Compute top analytics
    if not df_selection.empty:
# Verifica se o DataFrame df_selection n√£o est√° vazio.
#  O operador not inverte essa l√≥gica, ou seja, o c√≥digo dentro deste bloco ser√° executado apenas se df_selection contiver dados.
        media_umidade = df_selection["umidade"].mean()
        media_temperatura = df_selection["temperatura"].mean()
        media_co2 = df_selection["co2"].mean()
        media_pressao = df_selection["pressao"].mean()
# Calcula a m√©dia de valores das colunas selecionadas no DataFrame df_selection.
# As m√©dias calculadas s√£o armazenadas nas vari√°veis media_umidade, media_temperatura, media_co2 e media_pressao.

        total1, total2, total3, total4 = st.columns(4, gap='large')
# Cria quatro colunas (widgets de layout) no painel do Streamlit.
# st.columns(4): Gera quatro colunas iguais em largura.
# gap='large': Adiciona um espa√ßamento maior entre as colunas.

        with total1:
# Inicia um bloco with para a primeira coluna total1. O c√≥digo dentro deste bloco ser√° aplicado exclusivamente a essa coluna.
            st.info('M√©dia de Registros Umidade', icon='üìå')
# Exibe uma caixa de informa√ß√£o com um t√≠tulo e um √≠cone na primeira coluna.
            st.metric(label="M√©dia", value=f"{media_umidade:.2f}")
# Exibe uma m√©trica na primeira coluna mostrando a m√©dia de umidade calculada anteriormente.

        with total2:
            st.info('M√©dia de Registro CO2', icon='üìå')
            st.metric(label="M√©dia", value=f"{media_co2:.2f}")
        
        with total3:
            st.info('M√©dia de Registros de Temperatura', icon='üìå')
            st.metric(label="M√©dia", value=f"{media_temperatura:.2f}")
            
        with total4:
            st.info('M√©dia de Registros de Press√£o', icon='üìå')
            st.metric(label="M√©dia", value=f"{media_pressao:.2f}")
            
        st.markdown("""-----""")

def graphs():
# Define a fun√ß√£o graphs(), respons√°vel por gerar e exibir gr√°ficos.
    if df_selection.empty:
        st.write("Nenhum dado dispon√≠vel para gerar gr√°ficos.")
        return
# Verifica se o DataFrame filtrado est√° vazio, e, se estiver, exibe uma mensagem 
# dizendo que n√£o h√° dados dispon√≠veis para gerar gr√°ficos.

    
    # Verifica√ß√£o se os eixos X e Y s√£o iguais
    if x_axis == y_axis:
        st.warning("Selecione uma op√ß√£o diferente para os eixos X e Y.")
        return
# Verifica se os eixos X e Y s√£o iguais e, se forem, exibe um aviso pedindo ao usu√°rio para selecionar op√ß√µes diferentes.


    # Gr√°fico simples de barra
    try:
# Inicia um bloco try, que √© utilizado para capturar e lidar com exce√ß√µes (erros) 
# que possam ocorrer durante a execu√ß√£o do c√≥digo. Se ocorrer um erro dentro desse bloco, 
# ele ser√° tratado em um bloco except correspondente (que n√£o est√° vis√≠vel neste trecho).

        # Agregando os dados conforme a sele√ß√£o
        grouped_data = df_selection.groupby(by=[x_axis]).size().reset_index(name='contagem')
# Agrega os dados do DataFrame df_selection com base na coluna selecionada para o eixo X (x_axis).
# df_selection.groupby(by=[x_axis]): Agrupa os dados com base nos valores da coluna selecionada como eixo X.
# .size(): Conta o n√∫mero de ocorr√™ncias em cada grupo.
# .reset_index(name='contagem'): Reseta o √≠ndice do DataFrame agrupado e nomeia a nova 
# coluna com as contagens de cada grupo como "contagem"
        fig_valores = px.bar(
# Cria um gr√°fico de barras horizontais usando o Plotly Express com os dados agrupados.
            grouped_data,
# grouped_data: O DataFrame agrupado que cont√©m os dados a serem plotados.
            x=x_axis,
# x=x_axis: Define o eixo X do gr√°fico como a coluna selecionada no eixo X.
            y='contagem',
# y='contagem': Define o eixo Y do gr√°fico como a coluna "contagem", que cont√©m o n√∫mero de registros em cada grupo.
            orientation='h',
# orientation='h': Define a orienta√ß√£o do gr√°fico como horizontal.
            title=f"<b>Contagem de Registros por {x_axis.capitalize()}</b>",
# title=f"<b>Contagem de Registros por {x_axis.capitalize()}</b>": Define o t√≠tulo do gr√°fico, com o nome da coluna do eixo X capitalizado.
            color_discrete_sequence=["#0083b8"],
# color_discrete_sequence=["#0083b8"]: Define a cor das barras no gr√°fico.
            template="plotly_white"
# template="plotly_white": Define um tema claro para o gr√°fico.
        )
        
        fig_valores.update_layout(
# Atualiza o layout do gr√°fico para personalizar sua apar√™ncia:
            plot_bgcolor="rgba(0,0,0,0)",
# plot_bgcolor="rgba(0,0,0,0)": Define a cor de fundo do gr√°fico como transparente.
            xaxis=dict(showgrid=False),
# xaxis=dict(showgrid=False): Remove as linhas de grade do eixo X.
            yaxis=dict(showgrid=False)
# yaxis=dict(showgrid=False): Remove as linhas de grade do eixo Y.
        )
    except Exception as e:
# Inicia um bloco except, que √© executado se algum erro ocorrer dentro do bloco try correspondente. 
# O tipo de erro capturado aqui √© a classe gen√©rica Exception, que pode capturar qualquer tipo de exce√ß√£o.
        st.error(f"Erro ao criar o gr√°fico de valores: {e}")
# Exibe uma mensagem de erro no Streamlit utilizando a fun√ß√£o st.error(). 
# A mensagem informa ao usu√°rio que ocorreu um erro ao criar o gr√°fico de valores.
# {e} √© interpolado na string para mostrar a mensagem detalhada do erro que foi capturado, 
# fornecendo mais informa√ß√µes sobre o que deu errado.
        fig_valores = None
# Define a vari√°vel fig_valores como None. Isso √© feito para garantir que, se houver um erro ao criar o gr√°fico, 
# fig_valores n√£o conter√° dados inv√°lidos. Em seguida, o c√≥digo pode lidar com essa aus√™ncia de um gr√°fico v√°lido de forma segura, 
# possivelmente ignorando a tentativa de exibi√ß√£o ou exibindo uma mensagem alternativa.
    
    # Gr√°fico simples de linha
    try:
        # Agregando os dados conforme a sele√ß√£o
        grouped_data = df_selection.groupby(by=[x_axis]).agg({y_axis: 'mean'}).reset_index()
        fig_state = px.line(
            grouped_data,
            x=x_axis,
            y=y_axis,
            title=f"<b>M√©dia de {y_axis.capitalize()} por {x_axis.capitalize()}</b>",
            color_discrete_sequence=["#0083b8"],
            template="plotly_white"
        )
        
        fig_state.update_layout(
            xaxis=dict(showgrid=False),
            plot_bgcolor="rgba(0,0,0,0)",
            yaxis=dict(showgrid=False)
        )
    except Exception as e:
        st.error(f"Erro ao criar o gr√°fico de linha: {e}")
        fig_state = None
    
    # Exibir gr√°ficos
    left, right = st.columns(2)
# Cria duas colunas lado a lado na interface do Streamlit. A vari√°vel left se refere √† primeira coluna e right 
# se refere √† segunda coluna. O par√¢metro 2 indica que voc√™ deseja criar duas colunas de largura igual. 
# Esse layout permite a exibi√ß√£o de dois elementos (neste caso, gr√°ficos) lado a lado.
    if fig_state:
# Verifica se a vari√°vel fig_state cont√©m um gr√°fico v√°lido. A vari√°vel fig_state foi definida anteriormente no 
# c√≥digo e pode ser None se houver um erro na cria√ß√£o do gr√°fico de linha. Se fig_state n√£o for None, significa que 
# h√° um gr√°fico v√°lido para exibir.
        with left:
# with left: define que o seguinte bloco de c√≥digo deve ser renderizado na coluna left criada anteriormente.
            st.plotly_chart(fig_state, use_container_width=True)
# st.plotly_chart(fig_state, use_container_width=True) exibe o gr√°fico de linha fig_state na coluna left. 
# A op√ß√£o use_container_width=True faz com que o gr√°fico utilize a largura total da coluna onde est√° inserido, 
# ajustando seu tamanho automaticamente para preencher o espa√ßo dispon√≠vel.
    if fig_valores:
# Verifica se a vari√°vel fig_valores cont√©m um gr√°fico v√°lido. A vari√°vel fig_valores foi definida anteriormente e 
# pode ser None se houver um erro na cria√ß√£o do gr√°fico de barras. Se fig_valores n√£o for None, significa que h√° um gr√°fico 
# v√°lido para exibir.
        with right:
# define que o seguinte bloco de c√≥digo deve ser renderizado na coluna right criada anteriormente.
            st.plotly_chart(fig_valores, use_container_width=True)
# st.plotly_chart(fig_valores, use_container_width=True) exibe o gr√°fico de barras fig_valores na coluna right. 
# A op√ß√£o use_container_width=True faz com que o gr√°fico utilize a largura total da coluna onde est√° inserido, 
# ajustando seu tamanho automaticamente para preencher o espa√ßo dispon√≠vel.

Home()